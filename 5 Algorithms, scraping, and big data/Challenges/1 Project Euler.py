'''
Project Euler

Now that you’ve learned a little bit about algorithms and written some really simple but essential code,
it’s time to put those skills to the test. There is one resource above all that helps data scientists
and other engineers practice their mathematical programming skills: Project Euler.

Project Euler is a fantastic set of mathematical programming problems.
Use the skills we’ve discussed here to find efficient solutions to the first 10 problems.
Once you’ve found your own solutions look around the web for others’ Python solutions to see other ways
people have approached these problems.

It’s a good idea to come back to Project Euler and continue to work through these problems.
They are a really great way to sharpen your mathematical programming.

1. Multiples of 3 and 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
'''
result = sum([i for i in range(1000) if (i % 3 == 0 or i % 5 == 0)])
'''
2. Even Fibonacci Numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms
'''
def is_even(x):
	if x % 2 == 0:
		return True

def under_limit(x):
	if x < 4000000:
		return True

nums = (1, 2)
total = 2

while True:
	a = sum(nums)
	b = nums[1] + a
	if under_limit(a) and under_limit(b):
		if is_even(a):
			total += a
		if is_even(b):
			total += b
	elif under_limit(a) and is_even(a):
		total += a
	else:
		break

	nums = (a, b)
'''
3. What is the largest prime factor of the number 600851475143?
'''
import math
def find_prime(num):
	max_prime = -1
	for a in range(3, int(math.sqrt(num)) + 1, 2):
		while num % a == 0:
			max_prime = a
			a = num / b
	return max_prime

find_prime(20)
